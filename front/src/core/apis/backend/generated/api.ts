/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    'user': string;
    /**
     * 
     * @type {boolean}
     * @memberof Todo
     */
    'checked': boolean;
}

/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticationToken !== undefined && authenticationToken !== null) {
                localVarHeaderParameter['authentication-token'] = String(authenticationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [label] 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (label?: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (authenticationToken !== undefined && authenticationToken !== null) {
                localVarHeaderParameter['authentication-token'] = String(authenticationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [label] 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addForUser: async (label?: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (authenticationToken !== undefined && authenticationToken !== null) {
                localVarHeaderParameter['authentication-token'] = String(authenticationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('check', 'id', id)
            const localVarPath = `/api/todo/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkForUser: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('checkForUser', 'id', id)
            const localVarPath = `/api/todo/user/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticationToken !== undefined && authenticationToken !== null) {
                localVarHeaderParameter['authentication-token'] = String(authenticationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForUser: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteForUser', 'id', id)
            const localVarPath = `/api/todo/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticationToken !== undefined && authenticationToken !== null) {
                localVarHeaderParameter['authentication-token'] = String(authenticationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForUser: async (authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticationToken !== undefined && authenticationToken !== null) {
                localVarHeaderParameter['authentication-token'] = String(authenticationToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, authenticationToken, authenticationToken2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [label] 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(label?: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(label, authenticationToken, authenticationToken2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [label] 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addForUser(label?: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addForUser(label, authenticationToken, authenticationToken2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkForUser(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkForUser(id, authenticationToken, authenticationToken2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteForUser(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteForUser(id, authenticationToken, authenticationToken2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllForUser(authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllForUser(authenticationToken, authenticationToken2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
            return localVarFp._delete(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [label] 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(label?: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<Todo> {
            return localVarFp.add(label, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [label] 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addForUser(label?: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<Todo> {
            return localVarFp.addForUser(label, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(id: string, options?: any): AxiosPromise<Todo> {
            return localVarFp.check(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkForUser(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<Todo> {
            return localVarFp.checkForUser(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForUser(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteForUser(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<Todo>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [authenticationToken] Authentication Token
         * @param {string} [authenticationToken2] Authentication Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForUser(authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<Array<Todo>> {
            return localVarFp.getAllForUser(authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {string} [authenticationToken] Authentication Token
     * @param {string} [authenticationToken2] Authentication Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public _delete(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration)._delete(id, authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [label] 
     * @param {string} [authenticationToken] Authentication Token
     * @param {string} [authenticationToken2] Authentication Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public add(label?: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).add(label, authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [label] 
     * @param {string} [authenticationToken] Authentication Token
     * @param {string} [authenticationToken2] Authentication Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public addForUser(label?: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).addForUser(label, authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public check(id: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).check(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [authenticationToken] Authentication Token
     * @param {string} [authenticationToken2] Authentication Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public checkForUser(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).checkForUser(id, authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [authenticationToken] Authentication Token
     * @param {string} [authenticationToken2] Authentication Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public deleteForUser(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).deleteForUser(id, authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getAll(options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [authenticationToken] Authentication Token
     * @param {string} [authenticationToken2] Authentication Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getAllForUser(authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).getAllForUser(authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
    }
}


